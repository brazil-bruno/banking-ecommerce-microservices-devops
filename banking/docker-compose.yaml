version: '3'
services:
  ## PostgresSQL Docker Compose Config
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 123456
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  ## PgAdmin Docker Compose Config
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

  ## Zookeeper and Kafka Configuration
  zookeeper:
    container_name: zookeeper
    networks:
      - broker-kafka
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Broker-Kafka
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    networks:
      - broker-kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring

  # Kafdrop Dashboard
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    networks:
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  # EUREKA
  eureka:
    image: brunobrazil/eureka:v1
    container_name: eureka
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring

  # ADDRESS
  address:
    image: brunobrazil/address:v1
    container_name: address
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - postgres
      - zipkin

  # CLIENT
  client:
    image: brunobrazil/client:v1
    container_name: client
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - postgres
      - zipkin

  # ACCOUNT
  account:
    image: brunobrazil/account:v1
    container_name: account
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
      - broker-kafka
    depends_on:
      - postgres
      - zipkin
      - kafka

  # OAUTH
  oauth:
    image: brunobrazil/oauth:v1
    container_name: oauth
    environment:
      - SECURITY_OAUTH2_CLIENT_CLIENT-ID=banking
      - SECURITY_OAUTH2_CLIENT_CLIENT-SECRET=banking123
      - JWT_SECRET=MY-JWT-SECRET
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      - zipkin

  # GATEWAY
  gateway:
    image: brunobrazil/gateway:v1
    container_name: gateway
    ports:
      - "8080:8080"
    environment:
      - JWT_SECRET=MY-JWT-SECRET
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      - zipkin

  # CARD
  card:
    image: brunobrazil/card:v1
    container_name: card
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
      - broker-kafka
    depends_on:
      - postgres
      - zipkin
      - kafka

## Networks
networks:
  broker-kafka:
    driver: bridge
  postgres:
    driver: bridge
  spring:
    driver: bridge

## Volumes
volumes:
  postgres:
  pgadmin: